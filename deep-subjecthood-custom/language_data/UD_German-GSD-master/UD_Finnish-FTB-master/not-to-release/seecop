#! /usr/bin/env python3
# -*- mode: Python; -*-

from argparse import ArgumentParser
from itertools import groupby
import os, sys

def parseargs():
    description = '''

    Report on "cop" structures.

    '''
    parser = ArgumentParser(description = description)

    parser.add_argument('inf',
                        help = '''
                        
                        input file in *.conllu

                        ''')

    # parser.add_argument('--in-place', '-i',
    #                     dest = 'inplace',
    #                     action = 'store_true',
    #                     help = '''
    # 
    #                     write to "{input-file}-temp" and replace input
    #                     file with output file at end
    #                    
    #
    #                    ''')

    args = parser.parse_args()
    args.inplace = False
    return args

def sentences(ins):
    for between, group in groupby(ins, str.isspace):
        if between: continue
        yield [
            line.rstrip('\r\n').split('\t')
            for line in group
        ]

def tokens(sen):
    return [
        record
        for record in sen
        if record[0].isdigit()
    ]

def trace(old, new):
    them = ([] if old == '_' else old.split('|')) + [new]
    return '|'.join(sorted(them, key = str.lower))

def main(args):

    if not args.inf.endswith('.conllu'):
        print('error: input file not in *.conllu:', args.inf,
              file = sys.stderr)
        exit(1)

    # used if args.inplace
    ouf = '{}-temp'.format(args.inf)

    # assumes sys.stdout is UTF-8 - please make it so
    out = (open(ouf, mode = 'w', encoding = 'UTF-8')
           if args.inplace
           else sys.stdout)

    [ REF, WORD, BASE,
      UPOS, XPOS,
      FEAT, HEAD, REL,
      WEV, MISC ] = range(10)

    for sen in sentences(open(args.inf, encoding = 'UTF-8')):
        
        # toks contains token records of sen; sen also contains other
        # records; each index in a token record (as a string) is
        # 1-based, so off by 1 with respect to toks as a Python list
        
        toks = tokens(sen)
        for token in toks:
            
            [ ref, word, base,
              upos, xpos,
              feat, head, rel,
              wev, misc ] = token

            # only "olla" can be "cop" so the rest be of interest
            
            if (rel == 'cop') <= (base == 'olla'):
                continue

            # structure of interest detected

            cop, par = int(ref), int(head)
            parent = toks[par - 1]

            mumble = (tok for tok in toks
                      if (tok is token or
                          tok is parent or
                          tok[HEAD] == ref or
                          tok[HEAD] == parent[REF]))
            lo = next(mumble)
            for hi in mumble: pass

            # lo is the first token that is token, or parent, or a
            # child of either of them; hi is the last such token

            lox, hix = int(lo[REF]), int(hi[REF])

            for record in sen:
                # there are no dependents of a "cop" (grep ^cop)
                kind = ('#' if not record[0].isdigit() else
                        'COP     ' if record is token else
                        'PAR     ' if record is parent

                        else '{:8}-cop'.format(record[REL])
                        if record[HEAD] == token[REF]

                        else '{:8}-par'.format(record[REL])
                        if record[HEAD] == parent[REF]
                        
                        else
                        ('xout', '.') [lox <= int(record[HEAD]) <= hix]
                        if (lox <= int(record[REF]) <= hix)
                        else
                        ('.', 'xin') [lox < int(record[HEAD]) < hix])
                print(kind, *record, sep = '\t', file = out)
            else: print(file = out)

        # for record in sen:
        #     print(*record, sep = '\t', file = out)
        # else: print(file = out)

    if args.inplace:
        out.close()
        os.rename(args.inf, '{}~'.format(args.inf))
        os.rename(ouf, args.inf)

if __name__ == '__main__':
    try:
        main(parseargs())
    except BrokenPipeError as exn:
        print(exn)
    except KeyboardInterrupt as exn:
        print(exn)
