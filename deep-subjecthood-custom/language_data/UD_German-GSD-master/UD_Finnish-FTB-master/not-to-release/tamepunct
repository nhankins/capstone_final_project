#! /usr/bin/env python3
# -*- mode: Python; -*-

from argparse import ArgumentParser
from itertools import groupby
import os, sys

def parseargs():
    description = '''

    Move some non-projective punctuation marks (word in ,.;:!? with
    rel punct, some token between word and its head has its head
    outside that range) to their neighbour, preferably backward. Leave
    in Misc a trace "Was18punct=non-proj:k" where k was the head.

    '''
    parser = ArgumentParser(description = description)

    parser.add_argument('inf',
                        help = '''
                        
                        input file in *.conllu

                        ''')
                        
    parser.add_argument('--in-place', '-i',
                        dest = 'inplace',
                        action = 'store_true',
                        help = '''

                        write to "{input-file}-temp" and replace input
                        file with output file at end
                        

                        ''')

    return parser.parse_args()

def sentences(ins):
    for between, group in groupby(ins, str.isspace):
        if between: continue
        yield [
            line.rstrip('\r\n').split('\t')
            for line in group
        ]

def tokens(sen):
    return [
        record
        for record in sen
        if record[0].isdigit()
    ]

def main(args):

    if not args.inf.endswith('.conllu'):
        print('error: input file not in *.conllu:', args.inf,
              file = sys.stderr)
        exit(1)

    # used if args.inplace
    ouf = '{}-temp'.format(args.inf)

    # assumes sys.stdout is UTF-8 - please make it so
    out = (open(ouf, mode = 'w', encoding = 'UTF-8')
           if args.inplace
           else sys.stdout)

    [ REF, WORD, BASE,
      UPOS, XPOS,
      FEAT, HEAD, REL,
      WEV, MISC ] = range(10)

    for sen in sentences(open(args.inf, encoding = 'UTF-8')):
        
        # toks contains token records of sen; sen also contains other
        # records; each index in a token record (as a string) is
        # 1-based, so off by 1 with respect to toks as a Python list
        
        toks = tokens(sen)
        for token in toks:
            
            [ ref, word, base,
              upos, xpos,
              feat, head, rel,
              wev, misc ] = token

            if not (rel == 'punct'): continue
            if word not in ',.;:!?': continue

            # note own and par be 1-based so off by 1 with toks
            own = int(ref)
            par = int(token[HEAD])

            lo, hi = sorted((par, own))

            if (all(lo <= int(tok[HEAD]) <= hi for tok in toks[lo:hi - 1]) and
                not any(lo < int(tok[HEAD]) < hi for tok in toks[:lo - 1]) and
                not any(lo < int(tok[HEAD]) < hi for tok in toks[hi:])):

                continue

            # non-projectivity detected

            if 1 == own < par:
                # nothing backward so must find new parent forward
                bwd = slice(0, 0, -1),
                fwd = slice(own, par - 1, +1)
            elif 1 < own < par:
                bwd = slice(own - 2, None, -1)
                fwd = slice(own, par - 1, +1)
            elif 1 <= par < own:
                bwd = slice(own - 2, par - 1, -1)
                fwd = slice(own, None, +1)
            else:
                print('this cannot happen', file = sys.stderr)
                exit(1)
                
            for tok in toks[bwd]:
                if tok[REL] in ('punct', 'mark', 'case'): continue
                token[HEAD] = tok[REF]
                print('found new head backward', file = sys.stderr)
                break
            else:
                for tok in toks[fwd]:
                    if tok[REL] in ('punct', 'mark', 'case'): continue
                    token[HEAD] = tok[REF]
                    print('only found new head forward', file = sys.stderr)
                    break
                else:
                    print('could not find new head', file = sys.stderr)
                    for record in sen:
                        print(*record, sep = '\t', file = sys.stderr)
                    else: print(file = sys.stderr)
                    continue
                    
            # token[HEAD] != head
            
            trace = 'Was18punct=non-proj:{}'.format(head)
            token[MISC] = '|'.join(sorted(([]
                                           if misc == '_'
                                           else misc.split('|'))
                                          + [trace],
                                          key = str.lower))
            continue

        for record in sen:
            print(*record, sep = '\t', file = out)
        else: print(file = out)

    if args.inplace:
        out.close()
        os.rename(args.inf, '{}~'.format(args.inf))
        os.rename(ouf, args.inf)

if __name__ == '__main__':
    try:
        main(parseargs())
    except BrokenPipeError as exn:
        print(exn)
    except KeyboardInterrupt as exn:
        print(exn)
